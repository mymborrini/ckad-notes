SECRETS:

let's image the following python application

------------------------------
import os
from flask import Flask

app = Flask(__name__)

@app.route("/")
def main():

	mysql.connector.connect(hots='mysql', database='mysql', user='root', password='paswrd')

	return render_template('hello.html', color=fetchcolor())

if __name__ == "__main__":
	app.run(host="0.0.0.0", port="8080")
------------------------------

As you can see user and password are hardcoded, this is of course not a good idea. We can use for example a configMap, but as you can imagine
confiMap can be a good place for string user or database_name... but not a password

 Secret are similar to configMap except they are stored in an encoded format.

Like configmap there are two steps:
 . CREATE SECRET
 . INJECT INTO POD


CREATE SECRET
As always there are two ways to create a secret, the imperative way and the declerative way
Imperative way:
 .  k create secret generic <secret-name> --from-literal=<key>=<value>
 .  k create secret generic <secret-name> --from-file=<fileName>

Declerative way
Like we did in configMap we create a file:
	
	apiVersion: v1
	kind: Secret
	metadata: 
		name: app-secret
	data
		DB_Host: mysql
		DB_USER: root
		DB_Password: paswrd

As you can see we have a problem now, since we specify the data in plain text, not encoded. So we have to encode the data. In a linux maxhine just type the follwing:
	echo -n 'mysql' | base64
	echo -n 'root'  | base64
	echo -n 'paswrd' | base64

 Put all this in the data variables

	data
		DB_Host: bXlzxWw=
		DB_USER: cm9vdA==
		DB_Password: cGFzd3Jk

As always to view secret 
 . k get secrets

(kubernetes always create a secrete for its interal porpouse)
If you want to decode just type the same command as before but with -- decode at the end
 	echo -n 'bXlzxWw=' | base64 --decode
	echo -n 'cm9vdA=='  | base64 --decode
	echo -n 'cGFzd3Jk' | base64 --decode


INJECT INTO POD

	containers:
		- name: simple-webapp-color
		  image: simple-webapp-color
		  ports:
		  	- containerPort: 8080
		  envFrom:
			- secretRef:
				name: app-secret


As configmap you can inject single env 

	containers:
		- name: simple-webapp-color
		  image: simple-webapp-color
		  ports:
		  	- containerPort: 8080
		  env:
			- name: DB_PASSWORD
			  valueFrom:
				secretKeyRef:
					name: app-secret
					key: DB_PASSWORD


Or inject all secrets as file in a volume
	volumes:
	- name: app-secret-volume
	  secret:
		secretName: app-secret			

In the last case it will create a file for each variables you add in the secret


NB:
Secrets are not encrypted only encoded -> do not check-in secret objects to scm along with code
Secrets are not encrypted in ETCD => Enable encryption at rest -> goto https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/
Anyone able to create pods/deployments in the same namespace can access the secrets => configure least-privilege access to Secrets - RBAC
Consider third-party secrets sotre provider like: AWS,Azure,GCP


Notes:
	When you say "Enable encryption at rest" it means that the master cluster service expose the API to the kubectl in order to manage all the operation. In particular since 
the secrets are stored in etcd, the should have encrypted. So the secret kubectl send the secret in base64 format to the cluster service through a REST request and only then,
 the cluster service encrypt them and save them (encrypted) into etcd.



