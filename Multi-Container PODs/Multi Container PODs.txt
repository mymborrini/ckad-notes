MULTI CONTAINER PODs


There are multiple patterns of multi container pods
Ambassador
Adapter
Sidecar

Multicontainer pod share the same lifecycle, which mean that they are created together and destroyed together, they share the same network, which means they can refer each other as localhost and they
share the same storage. 
So you don't have to enable service or any other kind of communication between them. 


apiVersion: v1
kind: Pod
metadata:
	name: simple-webapp
	labels:
		name: simple-webapp
spec:
	containers:
		- name: simple-webapp
		  image: simple-webapp
		  ports:
			- containerPort: 8080
		- name: log-agent
		  imaeg: log-agent

There are three common patterns related to the concept of multicontainer pod

SIDECAR:
This is the one we just saw, the log agent will collect logs and send them to a central log server

 -------------						   		----------------
 |	     |						   		|	       |	
 |	     |						   		|	       |
 |	     | 			-------------		   		|	       |
 | App	     | 	 <- Watch ->	| Log Agent | ============>    .....	|  Log Server  | 
 |	     | 			-------------		   		|	       |
 -------------						   		----------------

ADAPTER
But because each server generate logs in a different format we would like to have an adapter to convert all this differnt type of logs in a unique log type. This is what the adapter does

					    ----------------
					    |	       	   |
					    |	           |
		-------------		    |	           |
... ========>   | Adapter   | ============> |  Log Server  |
		-------------		    |	           |
					    ----------------
AMBASSADOR
Our application needs to communicate with a lot of database (dev, test, prod)


 -------------					-------------
 |	     |			______________	   Dev (DB)	
 |	     |			|		-------------
 |	     |			|		-------------
 | App	     |	---------------	|_____________    Test (DB)	
 |	     |			|		-------------
 -------------			|		-------------
				|_____________	   Prod (DB)
						-------------		

You have to be sure to change the connectivity of your application based on the environemnt you are in. You can add a new container to do this. So your application will always refers to a database as
localhost and the ambassador container will redirect to the right database based on the environment.


What about the lifecycle of multicontainer?
For example in the prvious example:
The process running in the log agent container is expected to stay alive as long as the web application is running. 
If any of them fails, the POD restarts.


But at times you may want to run a process that runs to completion in a container. For example a process that pulls a code 
or binary from a repository that will be used by the main web application. That is a task that will be run only one time 
when the pod is first created. Or a process that waits for an external 
service or database to be up before the actual application starts. That's where initContainers comes in.

An initContainer is configured in a pod like all other containers, except that it is specified inside a initContainers section, 
like this:


apiVersion: v1
kind: Pod
metadata:
	name: simple-webapp
	labels:
		name: simple-webapp
spec:
	containers:
		- name: simple-webapp
		  image: simple-webapp
		  ports:
			- containerPort: 8080
	initContainers:
		- name: init-myservice
		  image: busybox
		  command: ['sh','-c', 'echo "The app is running!" && sleep 3600']


When a POD is first created the initContainer is run, and the process in the initContainer must run to a completion 
before the real container hosting the application starts.

You can configure multiple such initContainers as well, like how we did for multi-pod containers.
In that case each init container is run one at a time in sequential order.

If any of the initContainers fail to complete, Kubernetes restarts the Pod 
repeatedly until the Init Container succeeds.

