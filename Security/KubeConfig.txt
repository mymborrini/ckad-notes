KUBECONFIG:

For now we see that we can create a config file to authenticate our users through username/password username/token and some other certificates.
So we can manage to perform request like the following one:

 . curl https://my-kube-playground:6443/api/v1/pods --key admin.key --cert admin.crt --cacert ca.crt

This is then validate from the api server to authenticate the user. You can of course use the kubectl command to do more or less

 . kubectl get pods --server my-kube-playgroun:6443 --client-key admin.key --client-certificate admin.crt --certificate-authority ca.crt


Of course typing all of this each time is a tedious task, so you move all this information in the KubeConfig file. So in your powershell you specify:

 . kubectl get pods --kubeconfig config


KubeConfig File
server: my-kube-playground:6443
client-key admin.key
client-certificate admin.crt
certificate-authority ca.crt


By default kubectl look for a file in $HOME/.kube/config

This file by default has 3 sections:

Clusters
----------
Different clusters for each environment or for different organisation: e.g Development, Production, Google...



Users
---------
The user accounts which you have access with. e.g Amin, Dev User, Prod User
This users may have different privileges on different cluster


Contexts
----------
Merge the previous two togheter and define which user manage which cluster.
e.g Admin@Production, Dev@Google

Remember you don't define a new user or new privileges, you simply define which user for which cluster.



So in the example before the server specification goes to the cluster section, the other cerfificates goes to the user section. You then create a context by merging this two

Cluster:
 MyKubePlayGround:
  host: my-kube-playground
  port: 6443

Users:
 Admin:
  client-key admin.key
  client-certificate admin.crt
  certificate-authority ca.crt


Contexts:
 Admin@MyKubePlayGround



So let's take a look at the real KubeConfig File

apiVersion: v1
kind: Config

clusters:
 - name: my-kube-playground
   cluster:
     certificate-authority: ca.crt
     server: https://my-kube-playground:6443

contexts:
 - name: my-kube-admin@my-kube-playground
   context:
      cluster: my-kube-playground
      user: my-kube-admin

users:
 - name: my-kube-admin
   user:
     client-certificate: admin.crt
     client-key: admin.key


And that's all, we don't have to create anything, the file is ready as it is and will be read by the kubectl


================
In the end for example we will have a file like the following (this is just a summary file, without the specifications):

apiVersion: v1
kind: Config

clusters:
 - name: my-kube-playground
 - name: development
 - name: production
 - name: google

contexts:
 - name: my-kube-admin@my-kube-playground
 - name: dev-user@google
 - name: prod-user@production

users:
 - name: my-kube-admin
 - name: admin
 - name: dev-user
 - name: prod-user


Now we have defined three contexts, how kubectl knows which context i'm referring to?
We can specify a current-context that will pick up by default:

apiVersion: v1
kind: Config

current-context: dev-user@google

clusters:
 - name: my-kube-playground
 - name: development
 - name: production
 - name: google

contexts:
 - name: my-kube-admin@my-kube-playground
 - name: dev-user@google
 - name: prod-user@production

users:
 - name: my-kube-admin
 - name: admin
 - name: dev-user
 - name: prod-user

.


There are commands to manage the kubeconfig file from imperative command.

HOW CAN I VIEW THE CONFIG?

 . kubectl config view

You can of course pass even custom config file

 . kubectl config view --kubeconfig=my-custom-config


HOW CAN I CHANGE THE CURRENT CONTEXT?
 
 . kubectl config use-context prod-user@production

Remember this will dynamically change the file

ANYTHING ELSE?
There are a lot of other commands, just type:
 . kubectl config -h


Another thing of the configuration file is of course namespaces, you can change the context in order to be redirect to a particulare namespace, just add the namespace keyword to
the context key:

apiVersion: v1
kind: Config

clusters:
 - name: my-kube-playground
   cluster:
     certificate-authority: ca.crt
     server: https://my-kube-playground:6443

contexts:
 - name: my-kube-admin@my-kube-playground
   context:
      cluster: my-kube-playground
      user: my-kube-admin
      namespace: finance

users:
 - name: my-kube-admin
   user:
     client-certificate: admin.crt
     client-key: admin.key


Finally let's check the certifactes since they are not really the way you look at them, it's better to use the absolute path so something like this.

apiVersion: v1
kind: Config

clusters:
 - name: my-kube-playground
   cluster:
     certificate-authority: /etc/kubernetes/pki/ca.crt
     server: https://my-kube-playground:6443

contexts:
 - name: my-kube-admin@my-kube-playground
   context:
      cluster: my-kube-playground
      user: my-kube-admin
      namespace: finance

users:
 - name: my-kube-admin
   user:
     client-certificate: /etc/kubernetes/pki/users/admin.crt
     client-key: /etc/kubernetes/pki/users/admin.key


Or as alternative you can even pass the entire certificate, not the path to a file. Just remember the certificate-authority keyword should be renamed into certificate-authority-data, client-certificate-data, 
client-key-data and the certificate itself should be converted in base64 before pasting it


apiVersion: v1
kind: Config

clusters:
 - name: my-kube-playground
   cluster:
     certificate-authority-data: certificate in base64
     server: https://my-kube-playground:6443
