CLUSTER ROLES:

Roles and RoleBindings are created by the namespace.
If you consider nodes they does not belong to any particular namespaces. So the resources are categorized as Namespace scoped or Cluster scoped.
Nodes belongs to cluster scoped.

Namespace scoped:
 . pods
 . replicasets
 . jobs
 . deployments
 . services
 . secrets
 . roles
 . rolebindings
 . configmaps
 . PVC

Cluster scoped:
 . nodes
 . PV
 . clusterroles
 . clusterrolesbindings
 . certifatesigningrequests
 . namespaces


In order to check the full list, just type:

 . kubectl api-resources --namespaced=true  (for namespaced)
 . kubectl api-resources --namespaced=false (for clusterd)


How do we authorize users to clustered resources like nodes or PV?


More or less in the same way, with clusterrole and clusterrolebindings


apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterTole
metadata:
  name: cluster-administrator
rules:
 - apiGroups: [""]
   resources: ["nodes"]
   verbs: ["list","get","create","delete"]


Then in a similar way we have to configure cluster role binding to 

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cluster-admin-role-binding
subjects:
 - kind: User
   name: cluster-admin
   apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: cluster-adminstrator
  apiGroup: rbac.authorization.k8s.io


N.B. You can even create clusterrole for namespaced resources, in that case the user will have access to that resourcde regardless the namespace.

In order to find the correct apiGroup just type: CORE api has by default v1

 . kubectl api-resources